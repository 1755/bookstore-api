// Code generated by mockery v2.53.2. DO NOT EDIT.

package author

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDAO is an autogenerated mock type for the DAO type
type MockDAO struct {
	mock.Mock
}

type MockDAO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDAO) EXPECT() *MockDAO_Expecter {
	return &MockDAO_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, model
func (_m *MockDAO) Create(ctx context.Context, model *Model) (*Model, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Model) (*Model, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Model) *Model); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Model) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAO_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDAO_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - model *Model
func (_e *MockDAO_Expecter) Create(ctx interface{}, model interface{}) *MockDAO_Create_Call {
	return &MockDAO_Create_Call{Call: _e.mock.On("Create", ctx, model)}
}

func (_c *MockDAO_Create_Call) Run(run func(ctx context.Context, model *Model)) *MockDAO_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Model))
	})
	return _c
}

func (_c *MockDAO_Create_Call) Return(_a0 *Model, _a1 error) *MockDAO_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAO_Create_Call) RunAndReturn(run func(context.Context, *Model) (*Model, error)) *MockDAO_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockDAO) Delete(ctx context.Context, id ID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDAO_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDAO_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *MockDAO_Expecter) Delete(ctx interface{}, id interface{}) *MockDAO_Delete_Call {
	return &MockDAO_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockDAO_Delete_Call) Run(run func(ctx context.Context, id ID)) *MockDAO_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *MockDAO_Delete_Call) Return(_a0 error) *MockDAO_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDAO_Delete_Call) RunAndReturn(run func(context.Context, ID) error) *MockDAO_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockDAO) GetByID(ctx context.Context, id ID) (*Model, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID) (*Model, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID) *Model); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAO_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockDAO_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
func (_e *MockDAO_Expecter) GetByID(ctx interface{}, id interface{}) *MockDAO_GetByID_Call {
	return &MockDAO_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockDAO_GetByID_Call) Run(run func(ctx context.Context, id ID)) *MockDAO_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ID))
	})
	return _c
}

func (_c *MockDAO_GetByID_Call) Return(_a0 *Model, _a1 error) *MockDAO_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAO_GetByID_Call) RunAndReturn(run func(context.Context, ID) (*Model, error)) *MockDAO_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, params
func (_m *MockDAO) GetMany(ctx context.Context, params *GetManyParams) ([]*Model, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []*Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetManyParams) ([]*Model, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetManyParams) []*Model); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetManyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAO_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type MockDAO_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - params *GetManyParams
func (_e *MockDAO_Expecter) GetMany(ctx interface{}, params interface{}) *MockDAO_GetMany_Call {
	return &MockDAO_GetMany_Call{Call: _e.mock.On("GetMany", ctx, params)}
}

func (_c *MockDAO_GetMany_Call) Run(run func(ctx context.Context, params *GetManyParams)) *MockDAO_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetManyParams))
	})
	return _c
}

func (_c *MockDAO_GetMany_Call) Return(_a0 []*Model, _a1 error) *MockDAO_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAO_GetMany_Call) RunAndReturn(run func(context.Context, *GetManyParams) ([]*Model, error)) *MockDAO_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyByBookID provides a mock function with given fields: ctx, id
func (_m *MockDAO) GetManyByBookID(ctx context.Context, id int32) ([]*Model, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetManyByBookID")
	}

	var r0 []*Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*Model, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*Model); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAO_GetManyByBookID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyByBookID'
type MockDAO_GetManyByBookID_Call struct {
	*mock.Call
}

// GetManyByBookID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockDAO_Expecter) GetManyByBookID(ctx interface{}, id interface{}) *MockDAO_GetManyByBookID_Call {
	return &MockDAO_GetManyByBookID_Call{Call: _e.mock.On("GetManyByBookID", ctx, id)}
}

func (_c *MockDAO_GetManyByBookID_Call) Run(run func(ctx context.Context, id int32)) *MockDAO_GetManyByBookID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockDAO_GetManyByBookID_Call) Return(_a0 []*Model, _a1 error) *MockDAO_GetManyByBookID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAO_GetManyByBookID_Call) RunAndReturn(run func(context.Context, int32) ([]*Model, error)) *MockDAO_GetManyByBookID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, fields
func (_m *MockDAO) Update(ctx context.Context, id ID, fields ...UpdateField) (*Model, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ID, ...UpdateField) (*Model, error)); ok {
		return rf(ctx, id, fields...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ID, ...UpdateField) *Model); ok {
		r0 = rf(ctx, id, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ID, ...UpdateField) error); ok {
		r1 = rf(ctx, id, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDAO_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDAO_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id ID
//   - fields ...UpdateField
func (_e *MockDAO_Expecter) Update(ctx interface{}, id interface{}, fields ...interface{}) *MockDAO_Update_Call {
	return &MockDAO_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, id}, fields...)...)}
}

func (_c *MockDAO_Update_Call) Run(run func(ctx context.Context, id ID, fields ...UpdateField)) *MockDAO_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]UpdateField, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(UpdateField)
			}
		}
		run(args[0].(context.Context), args[1].(ID), variadicArgs...)
	})
	return _c
}

func (_c *MockDAO_Update_Call) Return(_a0 *Model, _a1 error) *MockDAO_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDAO_Update_Call) RunAndReturn(run func(context.Context, ID, ...UpdateField) (*Model, error)) *MockDAO_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDAO creates a new instance of MockDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDAO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDAO {
	mock := &MockDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
